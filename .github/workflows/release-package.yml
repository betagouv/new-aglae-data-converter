name: Release Nuitka Package
on: push

jobs:
  # Install project for both Windows and Linux
  install:
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest]
        os: [windows-2019]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      ## BUILD HDF5
      # Get CMake
      - uses: lukka/get-cmake@latest
      # Get & configure Microsoft Visual C++
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 16

      - name: (cache) Restore zip HDF5 installer
        id: cache-hdf5-install-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/CMake-hdf5-1.10.7
          key: ${{ runner.os }}-CMake-hdf5-1.10.7

      - name: Download HDF5 CMake source release
        if: steps.cache-hdf5-install-restore.outputs.cache-hit != 'true'
        run: Invoke-WebRequest -OutFile ${{ github.workspace }}/CMake-hdf5-1.10.7.zip -Uri https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.7/src/CMake-hdf5-1.10.7.zip
        shell: pwsh

      - name: (cache) Save zip HDF5 installer
        id: cache-hdf5-install-save
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/CMake-hdf5-1.10.7
          key: ${{ runner.os }}-CMake-hdf5-1.10.7

      - name: Unzip HDF5 Files
        run: unzip -d '${{ github.workspace }}/HDF5' '${{ github.workspace }}/CMake-hdf5-1.10.7.zip'

      - name: Build HDF5
        working-directory: ${{ github.workspace }}\HDF5\CMake-hdf5-1.10.7
        run: ctest -S HDF5config.cmake,BUILD_GENERATOR=VS201964 -C Release -VV -O hdf5.log
        shell: pwsh

      ## Install project deps
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - uses: snok/install-poetry@v1
        with:
          version: 1.2.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Build rust
        run: make build_rs

      - name: Build CLI with Nuitka
        run: ls -la && make build_cli

      - name: Build GUI with Nuitka
        run: make build_gui

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            *.bin
